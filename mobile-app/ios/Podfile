require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'MindfulMeals' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

		# Additional fixes for Folly/Reanimated and RNScreens C++ flags
		installer.pods_project.targets.each do |target|
			# Folly and Reanimated macro compatibility to avoid coroutine/clock typedef issues
			if target.name == 'RCT-Folly' || target.name == 'RNReanimated'
				target.build_configurations.each do |config|
					config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
					defs = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
					['FOLLY_NO_CONFIG','FOLLY_MOBILE=1','FOLLY_USE_LIBCPP=1','FOLLY_CFG_NO_COROUTINES=1','FOLLY_HAVE_CLOCK_GETTIME=1','FOLLY_HAVE_CLOCKID_T=1'].each do |d|
						defs << d unless defs.include?(d)
					end
					config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs
				end
			end

			# Ensure RNScreens compiles with C++17 and libc++ so std::move, etc. are available
			if target.name == 'RNScreens'
				target.build_configurations.each do |config|
					config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
					config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
					other_cpp = config.build_settings['OTHER_CPLUSPLUSFLAGS'] || ['$(inherited)']
					other_cpp << '-std=gnu++17' unless other_cpp.include?('-std=gnu++17')
					other_cpp << '-stdlib=libc++' unless other_cpp.include?('-stdlib=libc++')
					config.build_settings['OTHER_CPLUSPLUSFLAGS'] = other_cpp
					# Ensure linker pulls in libc++ when building as a framework
					other_ld = config.build_settings['OTHER_LDFLAGS'] || ['$(inherited)']
					other_ld << '-lc++' unless other_ld.include?('-lc++')
					config.build_settings['OTHER_LDFLAGS'] = other_ld
					# Ensure libc++ headers are found
					headers = config.build_settings['HEADER_SEARCH_PATHS'] || ['$(inherited)']
					headers << '$(SDKROOT)/usr/include/c++/v1' unless headers.include?('$(SDKROOT)/usr/include/c++/v1')
					config.build_settings['HEADER_SEARCH_PATHS'] = headers
				end
			end
		end
  end
end
